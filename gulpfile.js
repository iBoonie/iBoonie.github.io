const gulp = require('gulp');
const fileinclude = require('gulp-file-include');
const inlineImages = require('gulp-inline-images');
const replace = require('gulp-replace');
const rename = require('gulp-rename');
const htmlMinify = require('html-minifier');

const options = {
	includeAutoGeneratedTags: true,
	removeAttributeQuotes: true,
	removeComments: true,
	removeRedundantAttributes: true,
	removeScriptTypeAttributes: true,
	removeStyleLinkTypeAttributes: true,
	useShortDoctype: true,
	collapseWhitespace: true,
	minifyJS: true,
	minifyCSS: true
};

function process(cb) {
	gulp.src(['./src/index.html'])
		.pipe(fileinclude())
		.pipe(replace('src="images', 'src="src/images'))
		.pipe(replace('src="/images', 'src="src/images'))
		.pipe(replace('src="./images', 'src="src/images'))
		.pipe(replace('href="images', 'href="src/images'))
		.on('data', function(file) {
            const buferFile = Buffer.from(htmlMinify.minify(file.contents.toString(), options))
            file.contents = buferFile;
            return;
        })
		.pipe(gulp.dest('./'))

	gulp.src(['./src/index.html'])
		.pipe(fileinclude())
		.pipe(inlineImages())
		.on('data', function(file) {
            const buferFile = Buffer.from(htmlMinify.minify(file.contents.toString(), options))
            file.contents = buferFile;
            return;
        })
        .pipe(rename('./FuncGodot-Manual.html'))
		.pipe(gulp.dest('./'))
	cb()
}

exports.default = process