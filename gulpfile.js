const gulp = require('gulp');
const fileinclude = require('gulp-file-include');
const inlineImages = require('gulp-inline-images');
const rename = require('gulp-rename');
const htmlMinify = require('html-minifier');

const options = {
	includeAutoGeneratedTags: true,
	removeAttributeQuotes: true,
	removeComments: true,
	removeRedundantAttributes: true,
	removeScriptTypeAttributes: true,
	removeStyleLinkTypeAttributes: true,
	useShortDoctype: true,
	collapseWhitespace: true,
	minifyJS: true,
	minifyCSS: true
};

function process(cb) {
	gulp.src(['src/images/*.*'], {removeBOM:false})
		.pipe(gulp.dest('build/images'));

	gulp.src(['src/index.html'])
		.pipe(fileinclude())
		.on('data', function(file) {
            const buferFile = Buffer.from(htmlMinify.minify(file.contents.toString(), options))
            file.contents = buferFile;
            return;
        })
		.pipe(gulp.dest('build'));

	gulp.src(['src/index.html'])
		.pipe(fileinclude())
		.pipe(inlineImages())
		.on('data', function(file) {
            const buferFile = Buffer.from(htmlMinify.minify(file.contents.toString(), options))
            file.contents = buferFile;
            return;
        })
        .pipe(rename('FuncGodot-Manual.html'))
		.pipe(gulp.dest('build'))

	cb()
}

exports.default = process